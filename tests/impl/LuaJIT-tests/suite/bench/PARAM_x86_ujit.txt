# Lines starting with a hash char are ignored by the test runner.
#
# This is a batch file for running benchmarks contributed by Mike Pall.
# Adapted from the original PARAM_x86.txt file index.
#
# The format is:
#  script_name.lua thr_jit_on thr_jit_off thr_overhead [arguments] [<input_file]
#
# where
#  * thr_jit_on  : max expected degradation in dev_jit_on/ref_jit_on test
#  * thr_jit_off : max expected degradation in dev_jit_off/ref_jit_off test
#  * thr_overhead: max expected degradation in dev_jit_on/dev_jit_off test
#
# All thresholds are expected as percentage values, negative values should be
# used to assert for desired performance gain.
#
# Beware, values below are calibrated for IPONWEB CI environment, there is no
# guarantee that they match your testing environment.
#
# Additional notes:
# * All file names should be relative to the directory where this file is located.
# * Arguments represent problem sizes and are tuned to avoid OOM errors in uJIT.
# * FASTA_ujit.txt is huge and is generated by a wrapper script.
#
# Test              # jit_on # jit_off # jit_overhead # arguments and input
binary-trees.lua       25      15        -5             18
chameneos.lua          15      15         5             1e7
coroutine-ring.lua     27      25         7             2e8
euler14-bit.lua        40      17        -60            1e8
fannkuch.lua           15      22        -50            11
fasta.lua              17      20        -40            1e7
k-nucleotide.lua       18      25        -40            <FASTA_ujit.txt
life.lua                5       5        -5
mandelbrot.lua          7      10        -50            5000
mandelbrot-bit.lua      7      20        -75            5000
md5.lua                 0       5        -75            20000
nbody.lua              30       5        -60            5e6
partialsums.lua         5      10        -20            1e7
pidigits-nogmp.lua     10      15        -50            5000
ray.lua                30      17        -60            9
recursive-ack.lua      70      25        -50            10
recursive-fib.lua      50      27        -50            45
scimark-fft.lua        18      25        -60            50000
scimark-lu.lua         40      10        -60            5000
scimark-sor.lua        10      20        -75            50000
scimark-sparse.lua     20      15        -60            5e5
series.lua              5       7        -10            10000
spectral-norm.lua      10      40        -80            3000
# Test              # jit_on # jit_off # jit_overhead # arguments and input

# Following tests run too fast and/or produce very unstable benchmarks.
# They cannot be used for somehow reliable benchmarking for now:
#array3d.lua           150      20         0             250
#sum-file.lua           ?       ?          ?             <SUMCOL_1.txt
#nsieve.lua             50      35         0             10
#nsieve-bit.lua         50      30         0             12
#nsieve-bit-fp.lua      50      30         0             12
#revcomp.lua            50      20        10             <FASTA_ujit.txt
